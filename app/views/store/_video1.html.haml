.container
  .row.isotope-grid
    .block1-txt-child1.flex-col-l.center.m-t-5.m-b-15
      %span.block1-name.ltext-108.trans-04.p-b-8.parner-title
        = I18n.t "page.index.video"
  .row
    .wrapper
      %i.fa.fa-lg.fa-solid.fa-angle-left{id: "left"}
      .carousel
        - @embed_links.each do |video|
          %iframe.video-item{:src=> "#{video}"}
      %i.fa.fa-lg.fa-solid.fa-angle-right{id: "right"}
:css
  .wrapper{
    display: flex;
    width: 100%;
    position: relative;
    padding-bottom: 40px;
  }
  .wrapper i{
    top: 50%;
    color: #343F4F;
    cursor: pointer;
    position: absolute;
    font-size: 40px;
  }
  .wrapper i:active{
    transform: translateY(-50%) scale(0.9);
  }

  .wrapper i:first-child{
    left: -22px;
    z-index: 999;
  }
  .wrapper i:last-child{
    right: -22px;
    z-index: 999;
  }
  .wrapper .carousel{
    font-size: 0px;
    cursor: pointer;
    overflow: hidden;
    white-space: nowrap;
    scroll-behavior: smooth;
    width: 100%;
  }
  .carousel.dragging{
    cursor: grab;
    scroll-behavior: auto;
  }
  .carousel.dragging img{
    pointer-events: none;
  }
  .carousel .video-item{
    height: 340px;
    object-fit: cover;
    user-select: none;
    margin-left: 14px;
    width: 33.333%;
  }
  .carousel .video-item:first-child{
    margin-left: 0px;
  }

  @media screen and (max-width: 900px) {
    .carousel .video-item{
      width: calc(100% / 2);
    }
  }

  @media screen and (max-width: 550px) {
    .carousel .video-item{
      width: 100%;
    }
  }
:javascript
  const carousel = document.querySelector(".carousel"),
  firstImg = carousel.querySelectorAll(".video-item")[0],
  arrowIcons = document.querySelectorAll(".wrapper i");

  let isDragStart = false, isDragging = false, prevPageX, prevScrollLeft, positionDiff;

  const showHideIcons = () => {
      // showing and hiding prev/next icon according to carousel scroll left value
      let scrollWidth = carousel.scrollWidth - carousel.clientWidth; // getting max scrollable width
      arrowIcons[0].style.display = carousel.scrollLeft == 0 ? "none" : "block";
      arrowIcons[1].style.display = carousel.scrollLeft == scrollWidth ? "none" : "block";
  }

  arrowIcons.forEach(icon => {
      icon.addEventListener("click", () => {
          let firstImgWidth = firstImg.clientWidth + 14; // getting first img width & adding 14 margin value
          // if clicked icon is left, reduce width value from the carousel scroll left else add to it
          carousel.scrollLeft += icon.id == "left" ? -firstImgWidth : firstImgWidth;
          setTimeout(() => showHideIcons(), 60); // calling showHideIcons after 60ms
      });
  });

  const autoSlide = () => {
      // if there is no image left to scroll then return from here
      if(carousel.scrollLeft - (carousel.scrollWidth - carousel.clientWidth) > -1 || carousel.scrollLeft <= 0) return;

      positionDiff = Math.abs(positionDiff); // making positionDiff value to positive
      let firstImgWidth = firstImg.clientWidth + 14;
      // getting difference value that needs to add or reduce from carousel left to take middle img center
      let valDifference = firstImgWidth - positionDiff;

      if(carousel.scrollLeft > prevScrollLeft) { // if user is scrolling to the right
          return carousel.scrollLeft += positionDiff > firstImgWidth / 3 ? valDifference : -positionDiff;
      }
      // if user is scrolling to the left
      carousel.scrollLeft -= positionDiff > firstImgWidth / 3 ? valDifference : -positionDiff;
  }

  const dragStart = (e) => {
      // updatating global variables value on mouse down event
      isDragStart = true;
      prevPageX = e.pageX || e.touches[0].pageX;
      prevScrollLeft = carousel.scrollLeft;
  }

  const dragging = (e) => {
      // scrolling images/carousel to left according to mouse pointer
      if(!isDragStart) return;
      e.preventDefault();
      isDragging = true;
      carousel.classList.add("dragging");
      positionDiff = (e.pageX || e.touches[0].pageX) - prevPageX;
      carousel.scrollLeft = prevScrollLeft - positionDiff;
      showHideIcons();
  }

  const dragStop = () => {
      isDragStart = false;
      carousel.classList.remove("dragging");

      if(!isDragging) return;
      isDragging = false;
      autoSlide();
  }

  carousel.addEventListener("mousedown", dragStart);
  carousel.addEventListener("touchstart", dragStart);

  document.addEventListener("mousemove", dragging);
  carousel.addEventListener("touchmove", dragging);

  document.addEventListener("mouseup", dragStop);
  carousel.addEventListener("touchend", dragStop);